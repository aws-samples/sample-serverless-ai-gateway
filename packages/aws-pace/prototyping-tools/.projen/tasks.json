{
  "tasks": {
    "add-license": {
      "name": "add-license",
      "steps": [
        {
          "exec": "poetry run python add-license.py --path ../../../packages"
        }
      ]
    },
    "bandit": {
      "name": "bandit",
      "steps": [
        {
          "exec": "bandit -c .bandit.toml -r . -f sarif -o bandit.sarif"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files"
    },
    "install": {
      "name": "install",
      "env": {
        "PYTHON_VERSION": "$(pyenv latest 3 | cut -d '.' -f 1,2 || echo '')"
      },
      "steps": [
        {
          "exec": "poetry env use python$PYTHON_VERSION"
        },
        {
          "exec": "poetry lock"
        },
        {
          "exec": "poetry install"
        },
        {
          "exec": "rm -f `poetry env info -p`/bin/projen `poetry env info -p`/bin/pdk"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install dependencies with frozen lockfile",
      "env": {
        "PYTHON_VERSION": "$(pyenv latest 3 | cut -d '.' -f 1,2 || echo '')"
      },
      "steps": [
        {
          "exec": "poetry env use python$PYTHON_VERSION"
        },
        {
          "exec": "poetry check --lock && poetry install"
        },
        {
          "exec": "rm -f `poetry env info -p`/bin/projen `poetry env info -p`/bin/pdk"
        }
      ]
    },
    "licensecheck": {
      "name": "licensecheck",
      "steps": [
        {
          "exec": "test -f licensecheck-output.json || poetry run licensecheck -o licensecheck-output.json"
        }
      ]
    },
    "pip-audit": {
      "name": "pip-audit",
      "steps": [
        {
          "exec": "poetry run pip-audit -o pip-audit.txt"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "publish": {
      "name": "publish",
      "description": "Uploads the package to PyPI.",
      "steps": [
        {
          "exec": "poetry publish"
        }
      ]
    },
    "publish:test": {
      "name": "publish:test",
      "description": "Uploads the package against a test PyPI endpoint.",
      "steps": [
        {
          "exec": "poetry publish -r testpypi"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "pytest"
        }
      ]
    },
    "update": {
      "name": "update",
      "steps": [
        {
          "exec": "poetry update"
        }
      ]
    }
  },
  "env": {
    "VIRTUAL_ENV": "$(env -u VIRTUAL_ENV poetry env info -p || echo '')",
    "PATH": "$(echo $(env -u VIRTUAL_ENV poetry env info -p || echo '')/bin:$PATH)"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
