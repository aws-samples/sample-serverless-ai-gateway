import {
    SampleFile,
    Project,
    typescript,
    DependencyType,
    SampleDir,
} from "projen";
import {
    TypeScriptModuleResolution,
    TypeScriptJsxMode,
} from "projen/lib/javascript";
import path from "path";

export class ViteConfigTsFile extends SampleFile {
    constructor(scope: Project) {
        super(scope, "vite.config.ts", {
            sourcePath: path.join(
                __dirname,
                "vite-sample-files",
                "vite.config.ts",
            ),
        });
    }
}

class ViteConfigTsLibFile extends SampleFile {
    constructor(scope: Project) {
        super(scope, "vite.config.ts", {
            sourcePath: path.join(
                __dirname,
                "vite-sample-files",
                "vite.config.lib.ts",
            ),
        });
    }
}

class TypescriptViteReactSWCProject extends typescript.TypeScriptAppProject {
    constructor(options: typescript.TypeScriptProjectOptions) {
        const implicitDeps = ["react@^18.2.0", "react-dom@^18.2.0"];
        const implicitDevDeps = [
            "@types/react@^18.2.43",
            "@types/react-dom@^18.2.17",
            "@typescript-eslint/eslint-plugin@^6.14.0",
            "@typescript-eslint/parser@^6.14.0",
            "@vitejs/plugin-react-swc@^3.5.0",
            "eslint@^8.55.0",
            "eslint-plugin-react-hooks@^4.6.0",
            "eslint-plugin-react-refresh@^0.4.5",
            "typescript@^5.2.2",
            "vite@^5.1.7",
            "vite-plugin-dts",
            "vitest",
            "@types/node",
        ];

        super({
            ...options,
            artifactsDirectory: "dist",
            tsconfig: {
                compilerOptions: {
                    target: "ES2020",
                    // found in tsconfig generated by vite
                    // "useDefineForClassFields": true,
                    lib: ["ES2020", "DOM", "DOM.Iterable"],
                    module: "ESNext",
                    skipLibCheck: true,
                    moduleResolution: TypeScriptModuleResolution.BUNDLER,
                    allowImportingTsExtensions: true,
                    resolveJsonModule: true,
                    isolatedModules: true,
                    noEmit: true,
                    jsx: TypeScriptJsxMode.REACT_JSX,
                    strict: true,
                    noUnusedLocals: true,
                    noUnusedParameters: true,
                    noFallthroughCasesInSwitch: true,
                    rootDir: "./",
                    baseUrl: "./",
                    paths: {
                        "@/*": ["src/*"],
                    },
                },
                include: ["src", "test", "test/**/*.ts"],
            },
            tsconfigDev: {
                compilerOptions: {
                    skipLibCheck: true,
                    module: "ESNext",
                    moduleResolution: TypeScriptModuleResolution.BUNDLER,
                    allowSyntheticDefaultImports: true,
                    baseUrl: "./",
                    rootDir: "./",
                    paths: {
                        "@/*": ["src/*"],
                    },
                },
                include: ["vite.config.ts", "test", "test/**/*.ts"],
            },
            jest: false,
        });

        implicitDeps.forEach((d) => {
            if (!this.deps.tryGetDependency(d, DependencyType.BUILD))
                this.deps.addDependency(d, DependencyType.BUILD);
        });
        implicitDevDeps.forEach((d) => {
            if (!this.deps.tryGetDependency(d, DependencyType.DEVENV))
                this.deps.addDependency(d, DependencyType.DEVENV);
        });

        this.tasks.tryFind("test")?.reset("vitest", {});

        this.addTask("dev", {
            exec: "vite",
        });
        this.addTask("preview", {
            exec: "vite preview",
        });

        this.removeTask("build");
        this.addTask("build", {
            exec: "tsc && vite build",
        });

        this.tsconfig?.file.addOverride(
            "compilerOptions.useDefineForClassFields",
            true,
        );
        this.tsconfigDev?.file.addOverride(
            "compilerOptions.useDefineForClassFields",
            true,
        );
    }
}

export class TypescriptViteReactSWCAppProject extends TypescriptViteReactSWCProject {
    constructor(options: typescript.TypeScriptProjectOptions) {
        super({
            ...options,
        });
        if (options.sampleCode) {
            new ViteConfigTsFile(this);
        }
    }
}

export class TypescriptViteReactSWCLibProject extends TypescriptViteReactSWCProject {
    constructor(options: typescript.TypeScriptProjectOptions) {
        super({
            ...options,
        });
        if (options.sampleCode) {
            new ViteConfigTsLibFile(this);
        }
    }
}

export class TypescriptViteServerlessV2 extends TypescriptViteReactSWCAppProject {
    constructor(options: typescript.TypeScriptProjectOptions) {
        const deps = Object.entries({
            "@aws-amplify/ui-react": "^6",
            "aws-amplify": "^6",
            "@cloudscape-design/components": "^3.0.388",
            "@types/humanize-duration": "^3.27.4",
            "humanize-duration": "^3.31.0",
            react: "^18.2.0",
            "react-dom": "^18.2.0",
            "react-error-boundary": "^4.0.12",
            "react-markdown": "^9.0.1",
            "react-router-dom": "^6.16.0",
        }).map(([name, version]) => `${name}@${version}`);

        super({
            ...options,
            deps: [...deps, ...(options.deps ?? [])],
            sampleCode: false,
        });
        if (options.sampleCode) {
            const sampleFiles = ["vite.config.ts", ".env", "index.html"];

            const sampleFilesDir = path.join(
                __dirname,
                "..",
                "..",
                "blueprints",
                "serverless-v2",
                "web-app",
            );

            for (const file of sampleFiles) {
                new SampleFile(this, file, {
                    sourcePath: path.join(sampleFilesDir, file),
                });
            }

            const sampleDirs = ["public", "src"];

            for (const dir of sampleDirs) {
                new SampleDir(this, dir, {
                    sourceDir: path.join(sampleFilesDir, dir),
                });
            }
        }
    }
}
